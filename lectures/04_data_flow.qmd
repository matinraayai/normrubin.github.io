---
execute:
  echo: true
format:
  html: default
  revealjs:
    chalkboard: true
    code-fold: true
    code-line-numbers: true
    echo: true
    mathjax: true
    output-file: revealjs_04_data_flow.qmd
    scrollable: true
    slideNumber: c/t
sidebar: false
title: Data Flow

---
The material in these slides have been taken from [Lecture Notes in Static Analysis" (Sec.6), by Michael I. Schwartzbach](
https://homepages.dcc.ufmg.br/~fernando/classes/dcc888/ementa/),  "Principles of Program Analysis", Chapter 6, by Niesen et al, and from Miachel Schwartzbach's "Lecture notes in Static Analysis", Chapter 6, First Section. 

##

![](df/ra1.svg)

##
![](df/ra2.svg)

##
![](df/ra3.svg)

##
![](df/ra4.svg)

##
![](df/ra5.svg)

##
![](df/ra6.svg)

##
![](df/ra7.svg)

##
![](df/ra8.svg)

##
![](df/ra9.svg)

##
![](df/ra10.svg)

##
![](df/ra11.svg)

## IN and OUT
![](df/ra12.svg)

## EQUATIONS
![](df/ra13.svg)

##
![](df/ra14.svg)

##
![](df/ra15.svg)

##
![](df/ra16.svg)

## Liveness Example 
![](df/ra17.svg)

## Summary by basic blocks

The dataflow equations used for a given basic block b and exiting block final  in live variable analysis:

$\operatorname{GEN}[b]$ - The set of variables that are used in b before any assignment in the same basic block.

$\operatorname{KILL}[b]$ - The set of variables that are assigned a value in b


The in-state of a block is the set of variables that are live at the start of the block. Its out-state is the set of variables that are live at the end of it. The out-state is the union of the in-states of the block's successors. The transfer function of a statement is applied by making the variables that are written dead, then making the variables that are read live.

## equations 

$
\begin{aligned}
  & \operatorname{IN}[b]=\operatorname{GEN}[b] \cup\left(\operatorname{OUT}[b]-\operatorname{KILL}[s]\right) \\
  & \operatorname{OUT}[\text { final }]=\emptyset \\ 
  & \operatorname{OUT}[b]=\bigcup_{p \in s u c c[b]} \operatorname{IN}[p] \\ 
  & \operatorname{GEN}\left[b: y \leftarrow f\left(x_1, \cdots, x_n\right)\right]=\left\{x_1, \ldots, x_n\right\} \\ 
  & \operatorname{KILL}\left[b: y \leftarrow f\left(x_1, \cdots, x_n\right)\right]=\{y\}

\end{aligned}
$



## an example 

```
b1: 
a = 3
b = 5
d = 4
x = 100
if a > b then 

   b2: 
    c = a + b
    d = 2 

b3: 
   c = 4
   return b*d +c
```

$\operatorname{GEN}[b]$ - The set of variables that are used in b before any assignment in the same basic block.

$\operatorname{KILL}[b]$ - The set of variables that are assigned a value in b

---

```
GEN[b1] = []         kill[b1] = [a,b,d,x]
GEN[b2] = [a,b]      kill[b2] = [c,d]
GEN[b3] = [b,d]      Kill[b3] = [c]
```

## processing 

```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%
graph TB
b1--> b2
b1 --> b3
b2--> b3
```

```
GEN[b1] = []         kill[b1] = [a,b,d,x]
GEN[b2] = [a,b]      kill[b2] = [c,d]
GEN[b3] = [b,d]      Kill[b3] = [c]
```


```
block OUT       IN   Next IN        worklist  
b3    []        []    [b,d]           b1,b2
b1    [b,d]     []    []              b2
b2    [b,d]     []    [a,b]           b1
b1    [a,b,d]   []    []              empty

```


  

##
![](df/ra18.svg)

##
![](df/ra19.svg)

##
![](df/ra20.svg)

##
![](df/ra21.svg)

##
![](df/ra22.svg)

##
![](df/ra23.svg)

##
![](df/ra24.svg)

##
![](df/ra25.svg)

##
![](df/ra26.svg)

##
![](df/ra27.svg)

##
![](df/ra28.svg)

##
![](df/ra29.svg)

##
![](df/ra30.svg)

##
![](df/ra31.svg)

##
![](df/ra32.svg)

##
![](df/ra33.svg)

##
![](df/ra34.svg)

##
![](df/ra35.svg)

##
![](df/ra36.svg)

## 
![](df/ra37.svg)

##
![](df/ra38.svg)

##
![](df/ra39.svg)

##
![](df/ra40.svg)

##
![](df/ra41.svg)

##
![](df/ra42.svg)

##
![](df/ra43.svg)

##
![](df/ra44.svg)

##
![](df/ra45.svg)

##
![](df/ra46.svg)

##
![](df/ra47.svg)

##
![](df/ra48.svg)

## 
![](df/ra49.svg)

##
![](df/ra50.svg)

##
![](df/ra51.svg)

##
![](df/ra52.svg)

## 
![](df/ra53.svg)

##
![](df/ra54.svg)

##
![](df/ra55.svg)


##
![](df/ra56.svg)

##
![](df/ra57.svg)

##
![](df/ra58.svg)

##
![](df/ra59.svg)

##  frameworks 

![](df/ra60.svg)

## common properties  Direction

Direction 

::: {.columns}

::: {.column}

backward 

1. liveness
1. very  busy expressions 

OUT is a function of the IN  of successors 

:::

::: {.column}

forward 

1. reaching Defs 
1. Available Expressions 

IN is a function of the OUT of Preds

:::

::: 


## common properties  Operation 


::: {.columns}

::: {.column}

May union 

1. Liveness 
1. Reaching defs 

merge using intersection

:::

::: {.column}

must 

1. very busy expressions 
1. Available Expressions 

merge using union 

:::

::: 



##
![](df/ra64.svg)

## transfer functions with a block or for one statement 

Forward   
$$ \text{OUT}_b = f_b(\text{IN}_b) $$

Backward  
$$ \text{IN}_b = f_b(\text{OUT}_b) $$

liveness IN = (OUT-def) union (args)

Very busy expressions IN = (OUT - exprs(def)) union (this expr)


## an example
```
if b1 
    while b2 { x = a1}
else 
    while b3 { x = a2}
x = a3
```


```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%

graph TD;
b1["p1: if b1"]
b2["p2: use b3"]
b3["p3: x = a2"]
b4["p4: use b2"]
b5["p5: x = a1"]
b6["p6: x = a3"]
b1--> b4
b1 --> b2


b2--> b6
b2--> b3

b3--> b2
b5--> b4

b4--> b5
b4--> b6

```

reaching defs - a definition of a variable v at pv reaches a point p if
there is a path from pv tp p and v is not redefined along the path

## equations 


::: {.columns}

::: {.column}

```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%


graph TD;
b1["p1: if b1"]
b2["p2: use b3"]
b3["p3: x = a2"]
b4["p4: use b2"]
b5["p5: x = a1"]
b6["p6: x = a3"]
b1--> b4
b1 --> b2


b2--> b6
b2--> b3

b3--> b2
b5--> b4

b4--> b5
b4--> b6

```

:::


::: {.column}

:::{.fragment}

$$ \small \text{IN}_p = \bigcup \text{OUT}_{ps}, ps \in pred(p)$$
```
IN[1] = empty
IN[2] = OUT[1] union OUT[3]
IN[3] = OUT[2]
IN[4] = OUT[1] union OUT[5]
IN[5] = OUT[4]
IN[6] = OUT[2] union OUT[4]
```
:::

:::{.fragment}

$$ \small \text{OUT}_p = (\text{IN)}_p - defs(v)) \cup \{ (p,v) \}  $$
```
OUT[1] = IN[1]
OUT[2] = IN[2]
OUT[3] = (IN[3] -{3,5,6}) union {3}
OUT[4] = IN[4]
OUT[5] = (IN[5] - {3,5,6}) union {5}
OUT[6] = (IN[6] - {3,5,6}) union {6}
```
:::

:::

::: 


## 
![](df/ra79.svg)


## complexity 
![](df/ra83.svg)


##
![](df/ra85.svg)

##
![](df/ra86.svg)

##
![](df/ra87.svg)

##
![](df/ra88.svg)



## graph of equations 

::: {.columns}

::: {.column}

```
IN[1] = empty
IN[2] = OUT[1] union OUT[3]
IN[3] = OUT[2]
IN[4] = OUT[1] union OUT[5]
IN[5] = OUT[4]
IN[6] = OUT[2] union OUT[4]
OUT[1] = IN[1]
OUT[2] = IN[2]
OUT[3] = (IN[3] -{3,5,6}) union {3}
OUT[4] = IN[4]
OUT[5] = (IN[5] - {3,5,6}) union {5}
OUT[6] = (IN[6] - {3,5,6}) union {6}
```


:::

::: {.column}

```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%

graph TB;
IN1-->OUT1
OUT1-->IN2
OUT1-->IN4
OUT3--> IN2
OUT2--> IN3
OUT5--> IN4
OUT4--> IN5
OUT2--> IN6
OUT4--> IN6
IN2--> OUT2
IN3--> OUT3
IN4--> OUT4
IN5--> OUT5
IN6--> OUT6


```

:::

::: 



## Reverse Postorder 
visit successors first (need an ordering)

![](df/ra95.svg)



## order 

::: {.columns}

::: {.column}

```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%

graph TB;
IN1-->OUT1
OUT1-->IN2
OUT1-->IN4
OUT3--> IN2
OUT2--> IN3
OUT5--> IN4
OUT4--> IN5
OUT2--> IN6
OUT4--> IN6
IN2--> OUT2
IN3--> OUT3
IN4--> OUT4
IN5--> OUT5
IN6--> OUT6



```

:::

::: {.column}

```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%
graph TD
b1[b1-1]--> b4[b4-4]
b1--> b2[b2-2]
b4--> b6[b6-5]
b4--> b5[b5-6]
b2--> b3[b3-3]

```

order b5 b6  b3 b3 b2 b1

:::

:::


## implement 

keep two data structures 

1. C current list 
2. P set of pending lists 

initially C is a reverse post order sort of the nodes 

process each element of C 

when we find a changed add it to P

When C is empty, sort P in reverse post order and move to C 

## representing sets 

we keep doing union and intersection for sets, which are sparse 

compilers generally use bit vectors 



##
![](df/ra123.svg)

##
![](df/ra124.svg)

##
![](df/ra125.svg)

##
![](df/ra126.svg)

##
![](df/ra127.svg)

##
![](df/ra128.svg)

##
![](df/ra129.svg)

##
![](df/ra130.svg)

##
![](df/ra131.svg)

## pseudo code 
```
// Initialize
for all CFG nodes n in N,
    OUT[n] = emptyset; // can optimize by OUT[n] = GEN[n];

// put all nodes into the changed set
// N is all nodes in graph,
Changed = N;

// Iterate 
while (Changed != emptyset)
{
    choose a node n in Changed;
    // remove it from the changed set
    Changed = Changed -{ n };

    // init IN[n] to be empty
    IN[n] = emptyset;
  
    // calculate IN[n] from predecessors' OUT[p]
    for all nodes p in predecessors(n)
         IN[n] = IN[n] Union OUT[p];

    oldout = OUT[n]; // save old OUT[n]
    
    // update OUT[n] using transfer function f_n ()
    OUT[n] = GEN[n] Union (IN[n] -KILL[n]);

    // any change to OUT[n] compared to previous value?
    if (OUT[n] changed) // compare oldout vs. OUT[n]
    {    
        // if yes, put all successors of n into the changed set
        for all nodes s in successors(n)
             Changed = Changed U { s };
    }
}
```



## loops 

This algorithm has no problems with loops!


## homework 3  


Implement one data flow analysis - For Bonus points make it generic so that the
same code supports multiple analysis. As always, think about how to test it.
use a simple ordering- Not necessary to use reverse post order 

as always think about testing 




